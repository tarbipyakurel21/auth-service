name: CI/CD Pipeline for Auth Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t auth-service .
          docker tag auth-service:latest 326061183428.dkr.ecr.us-east-2.amazonaws.com/auth-service:latest

      - name: Push Docker image to ECR
        run: |
          docker push 326061183428.dkr.ecr.us-east-2.amazonaws.com/auth-service:latest

      - name: Register new task definition revision with environment variables
        id: register-task
        run: |
          EXISTING_DEF=$(aws ecs describe-task-definition --task-definition auth-service-task)
          NEW_DEF=$(echo $EXISTING_DEF | jq \
            --arg IMAGE "326061183428.dkr.ecr.us-east-2.amazonaws.com/auth-service:latest" \
            --arg JWT_SECRET "${{ secrets.JWT_SECRET }}" \
            --arg DB_URL "${{ secrets.DB_URL }}" \
            --arg DB_USERNAME "${{ secrets.DB_USERNAME }}" \
            --arg DB_PASSWORD "${{ secrets.DB_PASSWORD }}" \
            --arg GOOGLE_CLIENT_ID "${{ secrets.GOOGLE_CLIENT_ID }}" \
            --arg GOOGLE_CLIENT_SECRET "${{ secrets.GOOGLE_CLIENT_SECRET }}" \
            '.taskDefinition | 
              .containerDefinitions[0].image = $IMAGE |
              .containerDefinitions[0].environment = [
                { "name": "JWT_SECRET", "value": $JWT_SECRET },
                { "name": "DB_URL", "value": $DB_URL },
                { "name": "DB_USERNAME", "value": $DB_USERNAME },
                { "name": "DB_PASSWORD", "value": $DB_PASSWORD },
                { "name": "GOOGLE_CLIENT_ID", "value": $GOOGLE_CLIENT_ID },
                { "name": "GOOGLE_CLIENT_SECRET", "value": $GOOGLE_CLIENT_SECRET }
              ] |
              { family, executionRoleArn, networkMode, containerDefinitions, requiresCompatibilities, cpu, memory }')
          TASK_DEF_ARN=$(echo $NEW_DEF | aws ecs register-task-definition --cli-input-json file:///dev/stdin --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Deploy to Amazon ECS via AWS CLI
        run: |
          aws ecs update-service \
            --cluster my-microservices-cluster \
            --service auth-service-task-service-3zr46qju \
            --task-definition ${{ steps.register-task.outputs.task_definition_arn }}
